#!/usr/bin/env bash

if [[ "$BASH_VERSINFO" -lt "4" ]]; then
	echo "!! Your system Bash is out of date: $BASH_VERSION"
	echo "!! Please upgrade to Bash 4 or greater."
	exit 2
fi

readonly bin_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
readonly include_dir="$bin_dir/../include"

source "$include_dir/cmd.bash"
source "$include_dir/fn.bash"
source "$include_dir/utils.bash"
source "$include_dir/commands/env.bash"
source "$include_dir/commands/service.bash"
source "$include_dir/commands/build.bash"
source "$include_dir/commands/dyno.bash"
source "$include_dir/commands/pg.bash"

readonly identifier="devoku"
readonly port="${DEVOKU_PORT:-8000}"

if [ -f "$PWD/.env.template" ]; then
	# Use custom env.template
  readonly env_template_file="$PWD/.env.template"
else
	# Use default env.template
	readonly env_template_file="$include_dir/.env.template"
fi

readonly local_prefix="${DEVOKU_LOCAL_PREFIX:-$PWD/.$identifier}"
readonly local_import_tar="$local_prefix/import.tar.gz"
readonly local_cache_tar="$local_prefix/cache.tar.gz"
readonly local_slug_tar="$local_prefix/slug.tar.gz"
readonly local_env_file="$local_prefix/.env"
readonly local_share_dir="${DEVOKU_SHARE_DIR:-$PWD}"

readonly container_prefix="/$identifier"
readonly container_import_tar="$container_prefix/import.tar.gz"
readonly container_cache_tar="$container_prefix/cache.tar.gz"
readonly container_slug_tar="$container_prefix/slug.tar.gz"
readonly container_env_file="$container_prefix/.env"
readonly container_share_dir="$container_prefix/share"


readonly herokuish_image="${DEVOKU_HEROKUISH_IMAGE:-gliderlabs/herokuish:latest}"
readonly postgres_image="${DEVOKU_POSTGRES_IMAGE:-postgres:9.5}"
readonly redis_image="${DEVOKU_POSTGRES_IMAGE:-redis:latest}"
readonly fake_s3_image="${ODOOKU_POSTGRES_IMAGE:-lphoward/fake-s3:latest}"

readonly local_user="${DEVOKU_LOCAL_USER:-$USER}"
readonly local_group="${DEVOKU_LOCAL_GROUP:-docker}"

check-docker() {
	docker info > /dev/null 2>&1 || {
		echo >&2 "Docker is not installed";
		exit 100;
	}
}

check-git() {
	git version > /dev/null 2>&1 || {
		echo >&2 "Git is not installed";
		exit 110;
	}

	git rev-parse HEAD > /dev/null 2>&1 || {
		echo >&2 "$PWD is not a valid git repository";
		exit 111;
	}
}

ensure-dirs() {
  mkdir -p $local_prefix
}

remove-dirs() {
	rm $local_import_tar $local_cache_tar $local_slug_tar &> /dev/null || true
}

paths() {
	title "Devoku paths"
	echo "env template file: $env_template_file" |indent
	echo "env file: $local_env_file" | indent
}

main() {
	set -eo pipefail; [[ "$TRACE" ]] && set -x

	cmd-export paths
	cmd-export build
	cmd-export clean

	cmd-export-ns env "Manage Herokuish environment"
	cmd-export env-new
	cmd-export env-set
	cmd-export env-print

	cmd-export-ns dyno "Run Herokuish container"
	cmd-export dyno-web
	cmd-export dyno-worker
	cmd-export dyno-run
	cmd-export dyno-shell

	cmd-export-ns pg "Manage PostgreSQL"
	cmd-export pg-psql
	cmd-export pg-createdb
	cmd-export pg-dropdb

	cmd-export-ns service
	cmd-export-ns service-postgres
	cmd-export-ns service-redis
	cmd-export-ns service-s3
	cmd-export service-postgres-up
	cmd-export service-postgres-down
	cmd-export service-redis-up
	cmd-export service-redis-down
	cmd-export service-s3-up
	cmd-export service-s3-down


	case "$1" in
		run)		dyno-run "${@:2}";;
		shell)		dyno-shell "${@:2}";;
		web)		dyno-web "${@:2}";;
		worker)		dyno-worker "${@:2}";;
		*)			cmd-ns "" "$@";
	esac
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
	main "$@"
fi
